kind: Template
apiVersion: v1
metadata:
  name: grafana
  annotations:
    "openshift.io/display-name": Grafana
    description: |
      Grafana server with patched Prometheus datasource.
    iconClass: fa fa-cogs
    tags: "metrics,monitoring,grafana,prometheus"
parameters:
  - description: The location of the grafana image
    name: IMAGE_GRAFANA
    value: grafana/grafana:7.1.3
  - description: The location of the proxy image
    name: IMAGE_PROXY
    value: openshift/oauth-proxy:v1.0.0
  - description: External URL for the grafana route
    name: ROUTE_URL
    value: "grafana-autocode.demo.edp-epam.com"
  - description: The namespace to instantiate heapster under. Defaults to 'grafana'.
    name: NAMESPACE
    value: autocode-edp-cicd
  - description: The session secret for the proxy
    name: SESSION_SECRET
    generate: expression
    from: "[a-zA-Z0-9]{43}"
objects:

  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: grafana
      namespace: "${NAMESPACE}"
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana"}}'

  - apiVersion: authorization.openshift.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: grafana-cluster-reader-autocode
    roleRef:
      name: cluster-reader
    subjects:
      - kind: ServiceAccount
        name: grafana
        namespace: "${NAMESPACE}"

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: grafana
      namespace: "${NAMESPACE}"
    spec:
      host: "${ROUTE_URL}"
      to:
        name: grafana
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge

  - apiVersion: v1
    kind: Service
    metadata:
      name: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: https
        service.alpha.openshift.io/serving-cert-secret-name: grafana-tls
      namespace: "${NAMESPACE}"
      labels:
        metrics-infra: grafana
        name: grafana
    spec:
      ports:
        - name: grafana
          port: 443
          protocol: TCP
          targetPort: 3000
      selector:
        app: grafana

  - apiVersion: v1
    kind: Secret
    metadata:
      name: grafana-proxy
      namespace: "${NAMESPACE}"
    stringData:
      session_secret: "${SESSION_SECRET}="
  # Deploy Grafana behind an oauth proxy
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        app: grafana
      name: grafana
      namespace: "${NAMESPACE}"
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: grafana
      template:
        metadata:
          labels:
            app: grafana
          name: grafana
        spec:
          serviceAccountName: grafana
          nodeSelector:
            role: prometheus
          containers:
            - name: oauth-proxy
              image: ${IMAGE_PROXY}
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 8443
                  name: web
              args:
                - -https-address=:8443
                - -http-address=
                - -email-domain=*
                - -client-id=system:serviceaccount:${NAMESPACE}:grafana
                - -upstream=http://localhost:3000
                - -provider=openshift
                - -tls-cert=/etc/tls/private/tls.crt
                - -tls-key=/etc/tls/private/tls.key
                - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
                - -cookie-secret-file=/etc/proxy/secrets/session_secret
                - -skip-auth-regex=^/metrics,/api/datasources,/api/dashboards
              volumeMounts:
                - mountPath: /etc/tls/private
                  name: grafana-tls
                - mountPath: /etc/proxy/secrets
                  name: secrets

            - name: grafana
              image: ${IMAGE_GRAFANA}
              ports:
                - name: grafana-http
                  containerPort: 3000
              volumeMounts:
                - mountPath: /usr/share/grafana/dashboards
                  name: provisioning-dashboard
                - mountPath: /usr/share/grafana/datasources
                  name: provisioning-datasource
                - mountPath: "/root/go/src/github.com/grafana/grafana/data"
                  name: grafana-data
                - mountPath: "/usr/share/grafana/conf"
                  name: grafanaconfig
                - mountPath: /etc/tls/private
                  name: grafana-tls
                - mountPath: /etc/proxy/secrets
                  name: secrets

          volumes:
            - configMap:
                defaultMode: 420
                name: all-dashboards
              name: provisioning-dashboard
            - configMap:
                defaultMode: 420
                name: datasource
              name: provisioning-datasource
            - configMap:
                defaultMode: 420
                name: grafana-config
              name: grafanaconfig
            - name: secrets
              secret:
                secretName: grafana-proxy
            - name: grafana-tls
              secret:
                secretName: grafana-tls
            - persistentVolumeClaim:
                claimName: grafana
              name: grafana-data